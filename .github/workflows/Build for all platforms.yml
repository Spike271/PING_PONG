name: Build for all platforms

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        build_type: [ Release ]
        c_compiler: [ gcc, clang, cl ]

        exclude:
          # Linux configurations
          - os: ubuntu-latest
            c_compiler: cl

          # macOS configurations
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

      # Windows compiler setup
    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest' && matrix.c_compiler == 'cl'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: choco install ninja -y

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build
        sudo apt install libasound2-dev libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxinerama-dev libwayland-dev libxkbcommon-dev

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -G Ninja
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }}

    - name: Determine Executable Name
      id: exe-name
      shell: bash
      run: |
        EXE_PATH="${{ steps.strings.outputs.build-output-dir }}/PING_PONG"
        RES_PATH="${{ steps.strings.outputs.build-output-dir }}/res"
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          EXE_PATH="${EXE_PATH}.exe"
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          EXE_PATH="${EXE_PATH}.app"
        fi
        echo "exe_path=$EXE_PATH" >> $GITHUB_OUTPUT
        echo "res_folder_path=$RES_PATH" >> $GITHUB_OUTPUT

    - name: List build artifacts (Debug)
      run: |
        echo "Build directory contents:"
        ls -R ${{ steps.strings.outputs.build-output-dir }}

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: executable-${{ matrix.os }}-${{ matrix.c_compiler }}
        path: |  
          ${{ steps.exe-name.outputs.exe_path }}
          ${{ steps.exe-name.outputs.res_folder_path }}/**
